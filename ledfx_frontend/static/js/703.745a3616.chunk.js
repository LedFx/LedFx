(()=>{let e,r,t;self.onmessage=t=>{if(self.postMessage("worker-ready"),"canvas"in t.data){if(e=t.data.canvas,r=e.getContext("webgl")||e.getContext("experimental-webgl"),!r)return void console.error("WebGL not supported");a()}else if("pixels"in t.data){var o;const{pixels:a,rows:n,cols:E}=t.data;e.width=E,e.height=n,null===(o=r)||void 0===o||o.viewport(0,0,E,n),i(a,n,E)}};const a=()=>{const e=o(r.VERTEX_SHADER,"\n    attribute vec2 a_position;\n    attribute vec2 a_texCoord;\n    varying vec2 v_texCoord;\n    void main() {\n      gl_Position = vec4(a_position, 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  "),a=o(r.FRAGMENT_SHADER,"\n    precision mediump float;\n    varying vec2 v_texCoord;\n    uniform sampler2D u_texture;\n    void main() {\n      gl_FragColor = texture2D(u_texture, v_texCoord);\n    }\n  "),i=n(e,a);if(r.useProgram(i),!i)return void console.error("Failed to create WebGL program");const E=r.getAttribLocation(i,"a_position"),_=r.getAttribLocation(i,"a_texCoord"),T=r.createBuffer();r.bindBuffer(r.ARRAY_BUFFER,T),r.bufferData(r.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]),r.STATIC_DRAW);const R=r.createBuffer();r.bindBuffer(r.ARRAY_BUFFER,R),r.bufferData(r.ARRAY_BUFFER,new Float32Array([0,1,1,1,0,0,0,0,1,1,1,0]),r.STATIC_DRAW),t=r.createTexture(),r.bindTexture(r.TEXTURE_2D,t),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST),r.bindBuffer(r.ARRAY_BUFFER,T),r.enableVertexAttribArray(E),r.vertexAttribPointer(E,2,r.FLOAT,!1,0,0),r.bindBuffer(r.ARRAY_BUFFER,R),r.enableVertexAttribArray(_),r.vertexAttribPointer(_,2,r.FLOAT,!1,0,0)},o=(e,t)=>{const a=r.createShader(e);return a?(r.shaderSource(a,t),r.compileShader(a),r.getShaderParameter(a,r.COMPILE_STATUS)?a:(console.error("Error compiling shader:",r.getShaderInfoLog(a)),r.deleteShader(a),null)):(console.error("Error creating shader"),null)},n=(e,t)=>{const a=r.createProgram();return r.attachShader(a,e),r.attachShader(a,t),r.linkProgram(a),r.getProgramParameter(a,r.LINK_STATUS)?a:(console.error("Error linking program:",r.getProgramInfoLog(a)),r.deleteProgram(a),null)},i=(e,a,o)=>{r.bindTexture(r.TEXTURE_2D,t),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,o,a,0,r.RGBA,r.UNSIGNED_BYTE,new Uint8Array(e.flatMap((e=>[e.r,e.g,e.b,255])))),r.clear(r.COLOR_BUFFER_BIT),r.drawArrays(r.TRIANGLES,0,6)}})();