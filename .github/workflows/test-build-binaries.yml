name: Build Frozen Binaries for Distribution

on:
  push:
    paths-ignore:
      - "frontend/**"
      - "docs/**"
      - "tests/**"
      - ".github/ISSUE_TEMPLATE/**"
      - ".vscode/**"
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  DEFAULT_PYTHON: 3.12
  DOCKERHUB_IMAGE: ledfxorg/ledfx
  IMAGE_NAME: ledfx

jobs:
  build-ledfx-windows:
    name: Build LedFx (Windows)
    runs-on: windows-latest
    defaults:
      run:
        shell: bash -x {0}
    steps:
      - name: Setup CI sound system
        uses: LABSN/sound-ci-helpers@v1
      - name: Check out code from GitHub
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install NSIS (installer)
        uses: repolevedavaj/install-nsis@v1.0.1
        with:
          nsis-version: "3.11"

      - name: Update Path for Windows
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Enable long paths for git on Windows
        run: git config --system core.longpaths true

      - name: Install LedFx
        run: |
          uv sync --python ${{ env.DEFAULT_PYTHON }} --extra hue --dev

      - name: Get LedFx Version and Upload to Artifacts for later use
        id: ledfx-version
        run: |
          echo ledfx-version=$(uv run python -c "import ledfx; print(ledfx.__version__, end='')") >> $GITHUB_OUTPUT
          uv run python -c "import ledfx; print(ledfx.__version__, end='')" | tr -d '\n' > ledfx_version.txt

      - name: Upload LedFx Version
        uses: actions/upload-artifact@v4
        with:
          name: ledfx_version.txt
          path: ${{ github.workspace }}/ledfx_version.txt

      - name: Build Binary
        run: |
          uv run pyinstaller windows-binary.spec

      - name: Create installer
        run: |
          cd installer && makensis ledfx.nsi

      - name: Remove packaged portaudio binary
        run: |
          rm dist/LedFx/_internal/_sounddevice_data/portaudio-binaries/libportaudio64bit.dll

      - name: Move WASAPI loopback portaudio
        run: |
          mv loopback/libportaudio64bit.dll dist/LedFx/_internal/_sounddevice_data/portaudio-binaries/libportaudio64bit.dll

      - name: Upload LedFx Binary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-windows-x64
          path: ${{ github.workspace }}/dist/*

      - name: Upload LedFx Setup
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-windows-x64-setup
          path: ${{ github.workspace }}/installer/ledfx-setup.exe

  build-ledfx-osx-x64:
    name: Build LedFx (OS X [x64])
    runs-on: macos-13
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          brew install portaudio
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install LedFx
        run: |
          uv sync --python ${{ env.DEFAULT_PYTHON }} --extra hue --dev
      - name: Get LedFx Version
        id: ledfx-version
        run: |
          echo ledfx-version=$(uv run python -c "import ledfx; print(ledfx.__version__)") >> $GITHUB_OUTPUT
      - name: Build Binary
        run: |
          uv run pyinstaller osx-binary.spec
      - name: Make binary executable
        run: |
          chmod +x dist/LedFx/Contents/MacOS/LedFx
      - name: Create .app from dist
        run: |
          mv dist/LedFx/ dist/LedFx.app
      - name: Remove extended attributes
        run: |
          xattr -cr ./dist/LedFx.app
      - name: Create LedFx tarball
        run: |
          tar -cvf LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-osx-intel.tar ./dist/LedFx.app
      - name: Upload LedFx Binary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-osx-intel
          path: ${{ github.workspace }}/dist/*

  build-ledfx-osx-arm64:
    name: Build LedFx (OS X) (ARM64)
    runs-on: macos-latest
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          brew install portaudio mbedtls@2

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install LedFx
        run: |
          export PATH="/opt/homebrew/opt/mbedtls@2/bin:$PATH"
          export LDFLAGS="-L/opt/homebrew/opt/mbedtls@2/lib"
          export CPPFLAGS="-I/opt/homebrew/opt/mbedtls@2/include"
          export CFLAGS="-Wno-incompatible-function-pointer-types"
          uv sync --python ${{ env.DEFAULT_PYTHON }} --extra hue --dev
      - name: Get LedFx Version
        id: ledfx-version
        run: |
          echo ledfx-version=$(uv run python -c "import ledfx; print(ledfx.__version__)") >> $GITHUB_OUTPUT
      - name: Build Binary
        run: |
          uv run pyinstaller osx-binary.spec
      - name: Make binary executable
        run: |
          chmod +x ./dist/LedFx/Contents/MacOS/LedFx
      - name: Create .app from dist
        run: |
          mv ./dist/LedFx ./dist/LedFx.app
      - name: Remove extended attributes
        run: |
          xattr -cr ./dist/LedFx.app
      - name: Create LedFx tarball
        run: |
          tar -cvf LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-osx-arm64.tar ./dist/LedFx.app
      - name: Upload LedFx Binary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-osx-arm64
          path: ${{ github.workspace }}/dist/*

  build-ledfx-docker:
    name: Build LedFx Docker Image for ${{ matrix.ARCH }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ARCH: ["amd64", "arm64"]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up QEMU (for arm64 emulation)
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Lowercase repository owner
        id: repo
        run: |
          GHCR_IMAGE="ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/${IMAGE_NAME}"
          echo "GHCR_IMAGE=${GHCR_IMAGE}" >> $GITHUB_ENV
          if [[ "${GITHUB_REF}" == "refs/heads/main" || "${GITHUB_REF}" == refs/tags/v* ]] && [[ "${GITHUB_EVENT_NAME}" != "pull_request" ]]; then
            echo "DOCKER_CACHE_TO=type=registry,ref=${GHCR_IMAGE}:cache-${{ matrix.ARCH }},mode=max" >> $GITHUB_ENV
          else
            echo "DOCKER_CACHE_TO=" >> $GITHUB_ENV
          fi
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to DockerHub Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push images to GHCR and Docker Hub (edge-${{ matrix.ARCH }}, cache-${{ matrix.ARCH }})
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./ledfx_docker/Dockerfile
          platforms: linux/${{ matrix.ARCH }}
          provenance: false #https://github.com/orgs/community/discussions/45969#discussioncomment-4852744
          sbom: false
          push: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && github.event_name != 'pull_request' }}
          load: true
          tags: |
            ${{ env.GHCR_IMAGE }}:edge-${{ matrix.ARCH }}
            ${{ env.GHCR_IMAGE }}:edge-${{ matrix.ARCH }}-${{ github.sha }}
            ${{ env.DOCKERHUB_IMAGE }}:edge-${{ matrix.ARCH }}
            ${{ env.DOCKERHUB_IMAGE }}:edge-${{ matrix.ARCH }}-${{ github.sha }}
          cache-from: type=registry,ref=${{ env.GHCR_IMAGE }}:cache-${{ matrix.ARCH }}
          cache-to: ${{ env.DOCKER_CACHE_TO }}
          build-args: |
            GITHUB_SHA=${{ github.sha }}
            IS_RELEASE=${{ startsWith(github.ref, 'refs/tags/') }}
      - name: Save Docker image as artifact
        run: |
          docker save ${{ env.GHCR_IMAGE }}:edge-${{ matrix.ARCH }}-${{ github.sha }} | gzip -1 > image-${{ matrix.ARCH }}.tar.gz
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-${{ matrix.ARCH }}
          path: image-${{ matrix.ARCH }}.tar.gz
  docker-test:
    name: Test docker images
    needs: [build-ledfx-docker]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ARCH: ["amd64", "arm64"]
      fail-fast: false
    steps:
      - name: Lowercase repository owner
        id: repo
        run: |
          echo "GHCR_IMAGE=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV

      - name: Set up QEMU (for arm64 emulation)
        uses: docker/setup-qemu-action@v3

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: image-${{ matrix.ARCH }}
      - name: Load Docker image
        run: docker load -i image-${{ matrix.ARCH }}.tar.gz
      - name: Run test container
        run: |
          docker run --rm ${{ env.GHCR_IMAGE }}:edge-${{ matrix.ARCH }}-${{ github.sha }} --ci-smoke-test -vv --offline
      - name: Get LedFx Version
        run: |
          docker run --rm --entrypoint ledfx ${{ env.GHCR_IMAGE }}:edge-${{ matrix.ARCH }}-${{ github.sha }} --version | sed 's/LedFx //' > ledfx_version_docker.txt
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ledfx_version_docker-${{ matrix.ARCH }}
          path: ledfx_version_docker.txt

  docker-publish:
    name: Publish docker multiarch image
    needs: [build-ledfx-docker, docker-test]
    runs-on: ubuntu-latest
    env:
      ARCH: amd64
    steps:
      - name: Lowercase repository owner
        id: repo
        run: |
          echo "GHCR_IMAGE=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to DockerHub Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Download ledfx version docker txt
        uses: actions/download-artifact@v4
        with:
          name: ledfx_version_docker-${{ env.ARCH }}
      - name: Get LedFx Version
        id: ledfx-version
        run: |
          echo "ledfx-version=$(cat ledfx_version_docker.txt)" >> $GITHUB_OUTPUT
      - name: Retag and push latest and versioned images if tag is same as ledfx-version
        if: github.ref == format('refs/tags/v{0}', steps.ledfx-version.outputs.ledfx-version)
        run: |
          # GHCR latest manifest from GHCR per-arch images
          docker buildx imagetools create \
            -t ${{ env.GHCR_IMAGE }}:latest \
            -t ${{ env.GHCR_IMAGE }}:${{ steps.ledfx-version.outputs.ledfx-version }} \
            -t ${{ env.GHCR_IMAGE }}:${{ github.sha }} \
            ${{ env.GHCR_IMAGE }}:edge-amd64-${{ github.sha }} \
            ${{ env.GHCR_IMAGE }}:edge-arm64-${{ github.sha }}
          # Docker Hub latest manifest from Docker Hub per-arch images
          docker buildx imagetools create \
            -t ${{ env.DOCKERHUB_IMAGE }}:latest \
            -t ${{ env.DOCKERHUB_IMAGE }}:${{ steps.ledfx-version.outputs.ledfx-version }} \
            -t ${{ env.DOCKERHUB_IMAGE }}:${{ github.sha }} \
            ${{ env.DOCKERHUB_IMAGE }}:edge-amd64-${{ github.sha }} \
            ${{ env.DOCKERHUB_IMAGE }}:edge-arm64-${{ github.sha }}
      - name: Retag and push edge image
        if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && github.event_name != 'pull_request'
        run: |
          # GHCR edge manifest from GHCR per-arch images
          docker buildx imagetools create \
            -t ${{ env.GHCR_IMAGE }}:edge \
            -t ${{ env.GHCR_IMAGE }}:edge-${{ github.sha }} \
            ${{ env.GHCR_IMAGE }}:edge-amd64-${{ github.sha }} \
            ${{ env.GHCR_IMAGE }}:edge-arm64-${{ github.sha }}
          # Docker Hub edge manifest from Docker Hub per-arch images
          docker buildx imagetools create \
            -t ${{ env.DOCKERHUB_IMAGE }}:edge \
            -t ${{ env.DOCKERHUB_IMAGE }}:edge-${{ github.sha }} \
            ${{ env.DOCKERHUB_IMAGE }}:edge-amd64-${{ github.sha }} \
            ${{ env.DOCKERHUB_IMAGE }}:edge-arm64-${{ github.sha }}
  run-ledfx-windows:
    name: Test LedFx (Windows)
    runs-on: windows-latest
    needs: [build-ledfx-windows]
    defaults:
      run:
        shell: bash -x {0}
    steps:
      - name: Setup CI sound system
        uses: LABSN/sound-ci-helpers@v1
      - name: Download LedFx Version
        uses: actions/download-artifact@v4
        with:
          name: ledfx_version.txt
      - name: Get LedFx Version
        id: ledfx-version
        run: |
          echo ledfx-version=$(cat ledfx_version.txt) >> $GITHUB_OUTPUT
      - name: Download LedFx Binary
        uses: actions/download-artifact@v4
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-windows-x64
      - name: Run LedFx
        run: |
          LedFx/LedFx.exe -vv --ci-smoke-test --offline
  run-ledfx-osx-x64:
    name: Test LedFx (OS X [x64])
    runs-on: macos-13
    needs: [build-ledfx-windows, build-ledfx-osx-x64]
    steps:
      - name: Download LedFx Version
        uses: actions/download-artifact@v4
        with:
          name: ledfx_version.txt
      - name: Get LedFx Version
        id: ledfx-version
        run: |
          echo ledfx-version=$(cat ledfx_version.txt) >> $GITHUB_OUTPUT
      - name: Download LedFx Binary
        uses: actions/download-artifact@v4
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-osx-intel
      - name: Run LedFx
        run: |
          xattr -cr ./LedFx.app
          chmod +x ./LedFx.app/Contents/MacOS/LedFx
          ./LedFx.app/Contents/MacOS/LedFx -vv --ci-smoke-test --offline
  run-ledfx-osx-arm64:
    name: Test LedFx (OS X [arm64])
    runs-on: macos-latest
    needs: [build-ledfx-windows, build-ledfx-osx-arm64]
    steps:
      - name: Download LedFx Version
        uses: actions/download-artifact@v4
        with:
          name: ledfx_version.txt
      - name: Get LedFx Version
        id: ledfx-version
        run: |
          echo ledfx-version=$(cat ledfx_version.txt) >> $GITHUB_OUTPUT
      - name: Download LedFx Binary
        uses: actions/download-artifact@v4
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-osx-arm64
      - name: Run LedFx
        run: |
          xattr -cr ./LedFx.app
          chmod +x ./LedFx.app/Contents/MacOS/LedFx
          ./LedFx.app/Contents/MacOS/LedFx -vv --ci-smoke-test --offline
  create-release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    environment: production
    runs-on: macos-13
    needs: [run-ledfx-windows, run-ledfx-osx-x64, run-ledfx-osx-arm64]
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Download LedFx Version
        uses: actions/download-artifact@v4
        with:
          name: ledfx_version.txt
          path: dist/
      - name: Get LedFx Version
        id: ledfx-version
        run: |
          echo ledfx-version=$(cat dist/ledfx_version.txt) >> $GITHUB_OUTPUT
          rm -rf dist/ledfx_version.txt
      - name: Download OSX (x64) Binary
        uses: actions/download-artifact@v4
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-osx-intel
          path: dist/
      - name: Package OS X (x64) archive
        run: |
          xattr -cr dist/LedFx.app
          chmod +x dist/LedFx.app/Contents/MacOS/LedFx
          mv dist/LedFx.app dist/LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}.app
          cd dist
          tar c LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}.app | gzip --best > ../LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-osx-intel.tar.gz
          cd ..
          rm -rf dist/*
      - name: Download Windows (x64) Binary
        uses: actions/download-artifact@v4
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-windows-x64
          path: dist/
      - name: Create zip for Windows (x64)
        run: |
          mv dist/LedFx dist/LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}
          cd dist
          zip -r ../LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-win-x64.zip LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}
          cd ..
          rm -rf dist/*
      - name: Download OS X (arm64) Binary
        uses: actions/download-artifact@v4
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-osx-arm64
          path: dist/
      - name: Package OS X (arm64) archive
        run: |
          xattr -cr dist/LedFx.app
          chmod +x dist/LedFx.app/Contents/MacOS/LedFx
          mv dist/LedFx.app dist/LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}.app
          cd dist
          tar c LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}.app | gzip --best > ../LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-osx-arm64.tar.gz
          cd ..
          rm -rf dist/*
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-win-x64.zip
            LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-osx-intel.tar.gz
            LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-osx-arm64.tar.gz
          name: LedFx ${{ steps.ledfx-version.outputs.ledfx-version }}
          generate_release_notes: true

  build-test-wheel-and-sdist:
    name: Build LedFx (PyPi)
    runs-on: ubuntu-latest
    needs: [build-ledfx-windows]
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Download LedFx Version
        uses: actions/download-artifact@v4
        with:
          name: ledfx_version.txt
      - name: Get LedFx Version
        id: ledfx-version
        run: |
          echo ledfx-version=$(cat ledfx_version.txt) >> $GITHUB_OUTPUT
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Create and populate ledfx.env
        run: |
          echo "GITHUB_SHA = \"${{ github.sha }}\"" >> ledfx.env
          if [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            echo "IS_RELEASE = true" >> ledfx.env
          else
            echo "IS_RELEASE = false" >> ledfx.env
          fi
      - name: Build a binary wheel and sdist
        run: |
          uv build
      - name: Package the wheel
        uses: actions/upload-artifact@v4
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-wheel
          path: dist/ledfx-*.whl
      - name: Package the sdist
        uses: actions/upload-artifact@v4
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-sdist
          path: dist/ledfx-*.tar.gz

  install-from-wheel:
    name: Test LedFx (PyPi wheel)
    runs-on: ubuntu-latest
    needs: [build-test-wheel-and-sdist]
    steps:
      - name: Download LedFx Version
        uses: actions/download-artifact@v4
        with:
          name: ledfx_version.txt
      - name: Get LedFx Version
        id: ledfx-version
        run: |
          echo ledfx-version=$(cat ledfx_version.txt) >> $GITHUB_OUTPUT
      - name: Get the wheel
        uses: actions/download-artifact@v4
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-wheel
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false
      - name: Install build dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y portaudio19-dev
      - name: Create venv
        run: |
          uv venv
      - name: Install the wheel
        run: |
          uv pip install ledfx-*.whl
      - name: Run LedFx
        run: |
          uv run ledfx -vv --ci-smoke-test --offline

  install-from-sdist:
    name: Test LedFx (PyPi sdist)
    runs-on: ubuntu-latest
    needs: [build-test-wheel-and-sdist]
    steps:
      - name: Download LedFx Version
        uses: actions/download-artifact@v4
        with:
          name: ledfx_version.txt
      - name: Get LedFx Version
        id: ledfx-version
        run: |
          echo ledfx-version=$(cat ledfx_version.txt) >> $GITHUB_OUTPUT
      - name: Get the sdist
        uses: actions/download-artifact@v4
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-sdist
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false
      - name: Install build dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y portaudio19-dev
      - name: Create venv
        run: |
          uv venv
      - name: Install the sdist
        run: |
          uv pip install ledfx-*.tar.gz
      - name: Run LedFx
        run: |
          uv run ledfx --ci-smoke-test -vv --offline

  publish:
    name: Publish LedFx to PyPi
    needs: [install-from-wheel, install-from-sdist, create-release]
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download LedFx Version
        uses: actions/download-artifact@v4
        with:
          name: ledfx_version.txt
      - name: Get LedFx Version
        id: ledfx-version
        run: |
          echo ledfx-version=$(cat ledfx_version.txt) >> $GITHUB_OUTPUT
      - name: Get the wheel
        uses: actions/download-artifact@v4
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-wheel
          path: dist/
      - name: Get the sdist
        uses: actions/download-artifact@v4
        with:
          name: LedFx-${{ steps.ledfx-version.outputs.ledfx-version }}-sdist
          path: dist/
      - name: Publish to Test PyPI
        if: github.event_name == 'workflow_dispatch'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TEST_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  notify-sentry:
    name: Notify Sentry of Release
    needs: [create-release]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download LedFx Version
        uses: actions/download-artifact@v4
        with:
          name: ledfx_version.txt
          path: dist/
      - name: Get LedFx Version
        id: ledfx-version
        run: |
          echo ledfx-version=$(cat dist/ledfx_version.txt) >> $GITHUB_OUTPUT
          rm -rf dist/ledfx_version.txt
      - name: Create Sentry release
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN_V2 }}
          SENTRY_ORG: ledfx-org
          SENTRY_PROJECT: ledfx-v2-rel
        with:
          environment: production
          release: ledfx@${{ steps.ledfx-version.outputs.ledfx-version }}
